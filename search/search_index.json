{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the TKWW Project","text":"<p>In the technical aspect of the project, I opted to develop an API using FastAPI over other considered frameworks such as Flask or BentonML. The decisive factors for choosing FastAPI were its ease of use and the speed at which a proof of concept (PoC) could be realized. The API's architecture is inspired by the Model-View-Controller (MVC) pattern, aiming for modularity and scalability to accommodate future projects or enhancements.</p> <p>The core idea was to embrace various MLOps practices and concepts. This includes using Poetry for dependency management, implementing logging for effective monitoring post-deployment (with plans to integrate Prometheus or Grafana for enhanced insights), version control via GitHub, leveraging AWS for the environment, and adopting CI/CD principles. These practices ensure that all changes undergo testing before deployment and facilitate automatic deployment alongside the execution of periodic tasks.</p> <p>The primary development effort has been focused on creating an API that serves an ML model, located within the <code>tkww_api</code> directory. This includes: - A <code>service</code> layer responsible for the logic - <code>envelopes</code> for ensuring the integrity of input and output data using Pydantic for validation, - <code>controllers</code> for defining the API endpoints, - and a <code>util</code> folder containing models, data, and various utility functions.</p> <p>For the periodic retraining task, development is encapsulated in <code>retrainings.py</code>, utilizing HTTP communication with the API for model updates. While alternatives like Kafka were considered for their benefits in distributed messaging, HTTP was chosen for its simplicity and sufficiency for the PoC's scope.</p> <p>Additional documentation has been created using MKDocs to provide comprehensive insights into the project. Logging mechanisms are in place to ensure transparency and traceability. A <code>test</code> directory has been established, currently housing a few unit tests. However, to guarantee the API's functionality and robustness, further testing strategies including integration tests, load tests, acceptance tests, and compatibility tests are deemed necessary. Time constraints have limited the extent of testing, but the importance of these tests is well recognized for future development.</p> <p>This project's development emphasizes the application of MLOps practices to streamline the deployment and maintenance of ML models, ensuring that the API remains robust, scalable, and efficient.</p>"},{"location":"controller/","title":"<code>Endpoints</code>","text":""},{"location":"controller/#tkww_api.controllers.model_controller.change_model","title":"<code>change_model(request)</code>  <code>async</code>","text":"<p>Change the model.</p> <p>This function is responsible for changing the model based on the provided request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChangeModelRequest</code> <p>The request object containing the model to be changed.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict</code> <p>A dictionary containing the result of the model change operation.</p> Source code in <code>tkww_api/controllers/model_controller.py</code> <pre><code>@router.post(\"/change_model\")\nasync def change_model(request: ChangeModelRequest) -&gt; Dict:\n    \"\"\"Change the model.\n\n    This function is responsible for changing the model based on the provided request.\n\n    Args:\n        request (ChangeModelRequest): The request object containing the model to be changed.\n\n    Returns:\n        dict: A dictionary containing the result of the model change operation.\n    \"\"\"\n    try:\n        result = model_service.change_model(request.model)\n        if result[\"status\"] == \"Failed\":\n            Log.error(result[\"error\"])\n            raise HTTPException(status_code=500, detail=result[\"error\"])\n        return result\n    except Exception as e:\n        Log.error(f\"Model change error: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Model change error: {str(e)}\")\n</code></pre>"},{"location":"controller/#tkww_api.controllers.model_controller.index","title":"<code>index()</code>  <code>async</code>","text":"<p>This function is the handler for the root endpoint.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>A dictionary with a welcome message.</p> Source code in <code>tkww_api/controllers/model_controller.py</code> <pre><code>@router.get(\"/\")\nasync def index() -&gt; Dict:\n    \"\"\"\n    This function is the handler for the root endpoint.\n\n    Returns:\n        Dict: A dictionary with a welcome message.\n    \"\"\"\n    return {\"message\": \"Welcome to the API\"}\n</code></pre>"},{"location":"controller/#tkww_api.controllers.model_controller.predict","title":"<code>predict(request=Depends())</code>  <code>async</code>","text":"<p>Endpoint to make a prediction.</p> <p>This endpoint takes a PredictionRequest object as input and returns a PredictionOut object as output.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>PredictionRequest</code> <p>The prediction request object containing the input features. Defaults to Depends().</p> <code>Depends()</code> <p>Returns:</p> Name Type Description <code>PredictionOut</code> <code>PredictionOut</code> <p>The prediction result along with the name of the model used.</p> Source code in <code>tkww_api/controllers/model_controller.py</code> <pre><code>@router.get(\"/predict\", response_model=PredictionOut)\nasync def predict(request: PredictionRequest = Depends()) -&gt; PredictionOut:\n    \"\"\"Endpoint to make a prediction.\n\n    This endpoint takes a PredictionRequest object as input and returns a PredictionOut object as output.\n\n    Args:\n        request (PredictionRequest, optional): The prediction request object containing the input features. Defaults to Depends().\n\n    Returns:\n        PredictionOut: The prediction result along with the name of the model used.\n    \"\"\"\n    try:\n        prediction, model_name = model_service.predict(request)\n        return {\"prediction\": prediction, \"model\": model_name}\n\n    except Exception as e:\n        Log.error(f\"Error predicting: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre>"},{"location":"logger/","title":"<code>Logger</code>","text":""},{"location":"logger/#tkww_api.utils.logger.Logger","title":"<code>Logger</code>","text":"Source code in <code>tkww_api/utils/logger.py</code> <pre><code>class Logger:\n\n    def __init__(self):\n        \"\"\"\n        Initializes the Logger class.\n\n        This method sets up the logger instance and retrieves the worker ID.\n        \"\"\"\n        self.logger = logging.getLogger(\"app\")\n        self.worker_id = os.getpid()\n\n    def init_app(self, app: Any):\n        \"\"\"Initialize the logger for the given app instance.\n\n        This method loads the logging configuration from the config.yml file and configures the logger.\n\n        Args:\n            app (Any): app instance.\n        \"\"\"\n        config = load_logging_config(\"tkww_api/utils/logging_config/config.yml\")\n        logging.config.dictConfig(config)\n\n    def _build_log_message(self, msg: str, ip: str = \"N/A\"):\n        \"\"\"Builds a log message with the given message and IP address.\n\n        Args:\n            msg (str): The message to be included in the log.\n            ip (str, optional): The IP address associated with the log message. Defaults to \"N/A\".\n\n        Returns:\n            str: The log message in JSON format.\n        \"\"\"\n        logMessage = {\"ip\": ip, \"worker_id\": self.worker_id, \"custom_msg\": msg}\n        return json.dumps(logMessage)\n\n    def info(self, msg: str):\n        \"\"\"Log an informational message.\n\n        Args:\n            msg (str): The message to be logged.\n        \"\"\"\n        self.logger.info(msg)\n\n    def error(self, msg: str):\n        \"\"\"Logs an error message.\n\n        Args:\n            msg (str): The error message to be logged.\n        \"\"\"\n        self.logger.error(msg)\n\n    def info_custom(self, msg: str, ip: str = \"N/A\"):\n        \"\"\"Logs an info message with custom information.\n\n        Args:\n            msg (str): The message to be logged.\n            ip (str, optional): The IP address associated with the log message. Defaults to \"N/A\".\n        \"\"\"\n        self.logger.info(self._build_log_message(msg, ip))\n\n    def error_custom(self, msg: str, ip: str = \"N/A\"):\n        \"\"\"Logs a custom error message with an optional IP address.\n\n        Args:\n            msg (str): The error message to be logged.\n            ip (str, optional): The IP address associated with the error. Defaults to \"N/A\".\n        \"\"\"\n        self.logger.error(self._build_log_message(msg, ip))\n</code></pre>"},{"location":"logger/#tkww_api.utils.logger.Logger.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the Logger class.</p> <p>This method sets up the logger instance and retrieves the worker ID.</p> Source code in <code>tkww_api/utils/logger.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the Logger class.\n\n    This method sets up the logger instance and retrieves the worker ID.\n    \"\"\"\n    self.logger = logging.getLogger(\"app\")\n    self.worker_id = os.getpid()\n</code></pre>"},{"location":"logger/#tkww_api.utils.logger.Logger.error","title":"<code>error(msg)</code>","text":"<p>Logs an error message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The error message to be logged.</p> required Source code in <code>tkww_api/utils/logger.py</code> <pre><code>def error(self, msg: str):\n    \"\"\"Logs an error message.\n\n    Args:\n        msg (str): The error message to be logged.\n    \"\"\"\n    self.logger.error(msg)\n</code></pre>"},{"location":"logger/#tkww_api.utils.logger.Logger.error_custom","title":"<code>error_custom(msg, ip='N/A')</code>","text":"<p>Logs a custom error message with an optional IP address.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The error message to be logged.</p> required <code>ip</code> <code>str</code> <p>The IP address associated with the error. Defaults to \"N/A\".</p> <code>'N/A'</code> Source code in <code>tkww_api/utils/logger.py</code> <pre><code>def error_custom(self, msg: str, ip: str = \"N/A\"):\n    \"\"\"Logs a custom error message with an optional IP address.\n\n    Args:\n        msg (str): The error message to be logged.\n        ip (str, optional): The IP address associated with the error. Defaults to \"N/A\".\n    \"\"\"\n    self.logger.error(self._build_log_message(msg, ip))\n</code></pre>"},{"location":"logger/#tkww_api.utils.logger.Logger.info","title":"<code>info(msg)</code>","text":"<p>Log an informational message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be logged.</p> required Source code in <code>tkww_api/utils/logger.py</code> <pre><code>def info(self, msg: str):\n    \"\"\"Log an informational message.\n\n    Args:\n        msg (str): The message to be logged.\n    \"\"\"\n    self.logger.info(msg)\n</code></pre>"},{"location":"logger/#tkww_api.utils.logger.Logger.info_custom","title":"<code>info_custom(msg, ip='N/A')</code>","text":"<p>Logs an info message with custom information.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be logged.</p> required <code>ip</code> <code>str</code> <p>The IP address associated with the log message. Defaults to \"N/A\".</p> <code>'N/A'</code> Source code in <code>tkww_api/utils/logger.py</code> <pre><code>def info_custom(self, msg: str, ip: str = \"N/A\"):\n    \"\"\"Logs an info message with custom information.\n\n    Args:\n        msg (str): The message to be logged.\n        ip (str, optional): The IP address associated with the log message. Defaults to \"N/A\".\n    \"\"\"\n    self.logger.info(self._build_log_message(msg, ip))\n</code></pre>"},{"location":"logger/#tkww_api.utils.logger.Logger.init_app","title":"<code>init_app(app)</code>","text":"<p>Initialize the logger for the given app instance.</p> <p>This method loads the logging configuration from the config.yml file and configures the logger.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Any</code> <p>app instance.</p> required Source code in <code>tkww_api/utils/logger.py</code> <pre><code>def init_app(self, app: Any):\n    \"\"\"Initialize the logger for the given app instance.\n\n    This method loads the logging configuration from the config.yml file and configures the logger.\n\n    Args:\n        app (Any): app instance.\n    \"\"\"\n    config = load_logging_config(\"tkww_api/utils/logging_config/config.yml\")\n    logging.config.dictConfig(config)\n</code></pre>"},{"location":"retrainings/","title":"<code>ModelRetrainer</code>","text":""},{"location":"retrainings/#retrainings.ModelRetrainer","title":"<code>ModelRetrainer</code>","text":"Source code in <code>retrainings.py</code> <pre><code>class ModelRetrainer:\n\n    test_data_name = \"test-data.p\"\n    test_labels_name = \"test-labels.p\"\n    data_path = \"tkww_api/utils/data/\"\n    models_path = \"tkww_api/utils/models/\"\n\n    @classmethod\n    def load_test_data_and_labels(cls) -&gt; tuple:\n        \"\"\"Load test data and labels.\n\n        This method loads the test data and labels from the specified data path.\n\n        Returns:\n            tuple: A tuple containing the test data and test labels.\n        \"\"\"\n        test_data = load_file(cls.data_path, cls.test_data_name)\n        test_labels = load_file(cls.data_path, cls.test_labels_name)\n        return test_data, test_labels\n\n    @classmethod\n    def get_models(cls) -&gt; List[str]:\n        \"\"\"Get the list of model names.\n\n        This method returns a list of model names by scanning the models_path directory\n        and filtering the files with a \".p\" extension.\n\n        Returns:\n            List[str]: A list of model names.\n        \"\"\"\n        try:\n            files = os.listdir(cls.models_path)\n            return [file for file in files if file.endswith(\".p\")]\n        except OSError as e:\n            print(f\"Error loading model names: {e}\")\n            return []\n\n    @classmethod\n    def select_model(cls, models: List[str]) -&gt; str:\n        \"\"\"Selects a random model from the given list of models.\n\n        Args:\n            models (List[str]): A list of model names.\n\n        Returns:\n            str: The selected model name.\n        \"\"\"\n        if not models:\n            print(\"No models found.\")\n            return \"\"\n        selected_model = random.choice(models)\n        print(f\"Selected model: {selected_model}\")\n        return selected_model\n\n    @classmethod\n    def test_model(cls, model_name: str) -&gt; None:\n        \"\"\"Test the specified model using the test data and labels.\n\n        This method loads the model, makes predictions on the test data,\n        calculates the accuracy and prints the accuracy of the model.\n\n        Args:\n            model_name (str): The name of the model to be tested.\n        \"\"\"\n        test_data, test_labels = cls.load_test_data_and_labels()\n        model = load_file(cls.models_path, model_name)\n        predictions = model.predict(test_data)\n        accuracy = accuracy_score(test_labels, predictions)\n        print(f\"Accuracy: {accuracy}\")\n\n    @classmethod\n    def load_new_model_to_api(cls, model_name: str) -&gt; None:\n        \"\"\"Load a new model to the API.\n\n        This method sends a POST request to the API to load a new model.\n        It takes the model name as input and sends it as JSON data to the API.\n\n        Args:\n            model_name (str): The name of the model to be loaded.\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If there is an error communicating with the API.\n\n        \"\"\"\n        API_URL = \"http://18.201.57.160:80/change_model\"\n        headers = {\"Content-Type\": \"application/json\"}\n        data = {\"model\": model_name}\n\n        try:\n            response = requests.post(API_URL, json=data, headers=headers)\n            if response.status_code == 200:\n                print(f\"Model {model_name} successfully loaded to API.\")\n            else:\n                print(f\"Failed to load model {model_name} to API. Status code: {response.status_code}\")\n        except requests.RequestException as e:\n            print(f\"Error communicating with API: {e}\")\n\n    @classmethod\n    def retrain_and_test_model(cls) -&gt; None:\n        \"\"\"Retrains and tests a model.\n\n        This method selects a model from the models directory, loads it, and performs\n        a simulation of training, prediction, and metric calculation using test data.\n        The accuracy of the model is then printed.\n\n        Returns:\n            None\n        \"\"\"\n        print(\"Retraining, testing and loading a new model to the API.\\n\")\n        models = cls.get_models()\n        selected_model = cls.select_model(models)\n        if selected_model:\n            cls.test_model(selected_model)\n            cls.load_new_model_to_api(selected_model)\n</code></pre>"},{"location":"retrainings/#retrainings.ModelRetrainer.get_models","title":"<code>get_models()</code>  <code>classmethod</code>","text":"<p>Get the list of model names.</p> <p>This method returns a list of model names by scanning the models_path directory and filtering the files with a \".p\" extension.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of model names.</p> Source code in <code>retrainings.py</code> <pre><code>@classmethod\ndef get_models(cls) -&gt; List[str]:\n    \"\"\"Get the list of model names.\n\n    This method returns a list of model names by scanning the models_path directory\n    and filtering the files with a \".p\" extension.\n\n    Returns:\n        List[str]: A list of model names.\n    \"\"\"\n    try:\n        files = os.listdir(cls.models_path)\n        return [file for file in files if file.endswith(\".p\")]\n    except OSError as e:\n        print(f\"Error loading model names: {e}\")\n        return []\n</code></pre>"},{"location":"retrainings/#retrainings.ModelRetrainer.load_new_model_to_api","title":"<code>load_new_model_to_api(model_name)</code>  <code>classmethod</code>","text":"<p>Load a new model to the API.</p> <p>This method sends a POST request to the API to load a new model. It takes the model name as input and sends it as JSON data to the API.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to be loaded.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error communicating with the API.</p> Source code in <code>retrainings.py</code> <pre><code>@classmethod\ndef load_new_model_to_api(cls, model_name: str) -&gt; None:\n    \"\"\"Load a new model to the API.\n\n    This method sends a POST request to the API to load a new model.\n    It takes the model name as input and sends it as JSON data to the API.\n\n    Args:\n        model_name (str): The name of the model to be loaded.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If there is an error communicating with the API.\n\n    \"\"\"\n    API_URL = \"http://18.201.57.160:80/change_model\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = {\"model\": model_name}\n\n    try:\n        response = requests.post(API_URL, json=data, headers=headers)\n        if response.status_code == 200:\n            print(f\"Model {model_name} successfully loaded to API.\")\n        else:\n            print(f\"Failed to load model {model_name} to API. Status code: {response.status_code}\")\n    except requests.RequestException as e:\n        print(f\"Error communicating with API: {e}\")\n</code></pre>"},{"location":"retrainings/#retrainings.ModelRetrainer.load_test_data_and_labels","title":"<code>load_test_data_and_labels()</code>  <code>classmethod</code>","text":"<p>Load test data and labels.</p> <p>This method loads the test data and labels from the specified data path.</p> <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>A tuple containing the test data and test labels.</p> Source code in <code>retrainings.py</code> <pre><code>@classmethod\ndef load_test_data_and_labels(cls) -&gt; tuple:\n    \"\"\"Load test data and labels.\n\n    This method loads the test data and labels from the specified data path.\n\n    Returns:\n        tuple: A tuple containing the test data and test labels.\n    \"\"\"\n    test_data = load_file(cls.data_path, cls.test_data_name)\n    test_labels = load_file(cls.data_path, cls.test_labels_name)\n    return test_data, test_labels\n</code></pre>"},{"location":"retrainings/#retrainings.ModelRetrainer.retrain_and_test_model","title":"<code>retrain_and_test_model()</code>  <code>classmethod</code>","text":"<p>Retrains and tests a model.</p> <p>This method selects a model from the models directory, loads it, and performs a simulation of training, prediction, and metric calculation using test data. The accuracy of the model is then printed.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>retrainings.py</code> <pre><code>@classmethod\ndef retrain_and_test_model(cls) -&gt; None:\n    \"\"\"Retrains and tests a model.\n\n    This method selects a model from the models directory, loads it, and performs\n    a simulation of training, prediction, and metric calculation using test data.\n    The accuracy of the model is then printed.\n\n    Returns:\n        None\n    \"\"\"\n    print(\"Retraining, testing and loading a new model to the API.\\n\")\n    models = cls.get_models()\n    selected_model = cls.select_model(models)\n    if selected_model:\n        cls.test_model(selected_model)\n        cls.load_new_model_to_api(selected_model)\n</code></pre>"},{"location":"retrainings/#retrainings.ModelRetrainer.select_model","title":"<code>select_model(models)</code>  <code>classmethod</code>","text":"<p>Selects a random model from the given list of models.</p> <p>Parameters:</p> Name Type Description Default <code>models</code> <code>List[str]</code> <p>A list of model names.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected model name.</p> Source code in <code>retrainings.py</code> <pre><code>@classmethod\ndef select_model(cls, models: List[str]) -&gt; str:\n    \"\"\"Selects a random model from the given list of models.\n\n    Args:\n        models (List[str]): A list of model names.\n\n    Returns:\n        str: The selected model name.\n    \"\"\"\n    if not models:\n        print(\"No models found.\")\n        return \"\"\n    selected_model = random.choice(models)\n    print(f\"Selected model: {selected_model}\")\n    return selected_model\n</code></pre>"},{"location":"retrainings/#retrainings.ModelRetrainer.test_model","title":"<code>test_model(model_name)</code>  <code>classmethod</code>","text":"<p>Test the specified model using the test data and labels.</p> <p>This method loads the model, makes predictions on the test data, calculates the accuracy and prints the accuracy of the model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to be tested.</p> required Source code in <code>retrainings.py</code> <pre><code>@classmethod\ndef test_model(cls, model_name: str) -&gt; None:\n    \"\"\"Test the specified model using the test data and labels.\n\n    This method loads the model, makes predictions on the test data,\n    calculates the accuracy and prints the accuracy of the model.\n\n    Args:\n        model_name (str): The name of the model to be tested.\n    \"\"\"\n    test_data, test_labels = cls.load_test_data_and_labels()\n    model = load_file(cls.models_path, model_name)\n    predictions = model.predict(test_data)\n    accuracy = accuracy_score(test_labels, predictions)\n    print(f\"Accuracy: {accuracy}\")\n</code></pre>"},{"location":"services/","title":"<code>ModelService</code>","text":""},{"location":"services/#tkww_api.services.model_service.ModelService","title":"<code>ModelService</code>","text":"Source code in <code>tkww_api/services/model_service.py</code> <pre><code>class ModelService:\n\n    def __init__(self):\n        \"\"\"Initialize the ModelService class.\n\n        This method sets the initial values for the ModelService class.\n        It initializes the models path, model name, and loads the model.\n        \"\"\"\n\n        self.models_path = \"tkww_api/utils/models/\"\n        self.model_name = \"rf-1.p\"\n        self.model = load_file(self.models_path, self.model_name)\n\n    def predict(self, features: PredictionRequest) -&gt; Tuple[str, str]:\n        \"\"\"Make a prediction based on the given features.\n\n        This method makes a prediction based on the given features using the current model.\n\n        Args:\n            features (PredictionRequest): An instance of the PredictionRequest class containing the input features.\n\n        Returns:\n            Tuple[str, str]: A tuple containing the prediction as a list and the model name as a string.\n        \"\"\"\n\n        feature_values = [value for value in vars(features).values()]\n        input_data = np.array([feature_values], dtype=np.float32)\n\n        prediction = self.model.predict(input_data)\n\n        Log.info(\"Prediction made successfully.\")\n\n        return prediction.tolist(), self.model_name\n\n    def change_model(self, model_name: str) -&gt; Dict[str, str]:\n        \"\"\"Change the current model to the specified model.\n\n        Args:\n            model_name (str): The name of the model to change to.\n\n        Returns:\n            dict: A dictionary containing the status and message of the operation.\n        \"\"\"\n        try:\n            new_model = load_file(self.models_path, model_name)\n            if new_model is None:\n                Log.error(f\"Model {model_name} not found.\")\n                return {\"status\": \"Failed\", \"error\": f\"Model {model_name} not found.\"}\n\n            self.model_name = model_name\n            self.model = new_model\n            Log.info(f\"Model {model_name} loaded successfully.\")\n            return {\"status\": \"Success\", \"message\": f\"Model {model_name} loaded successfully.\"}\n\n        except Exception as e:\n            Log.error(f\"Error changing model: {e}\")\n            return {\"status\": \"Failed\", \"error\": str(e)}\n</code></pre>"},{"location":"services/#tkww_api.services.model_service.ModelService.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the ModelService class.</p> <p>This method sets the initial values for the ModelService class. It initializes the models path, model name, and loads the model.</p> Source code in <code>tkww_api/services/model_service.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the ModelService class.\n\n    This method sets the initial values for the ModelService class.\n    It initializes the models path, model name, and loads the model.\n    \"\"\"\n\n    self.models_path = \"tkww_api/utils/models/\"\n    self.model_name = \"rf-1.p\"\n    self.model = load_file(self.models_path, self.model_name)\n</code></pre>"},{"location":"services/#tkww_api.services.model_service.ModelService.change_model","title":"<code>change_model(model_name)</code>","text":"<p>Change the current model to the specified model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to change to.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, str]</code> <p>A dictionary containing the status and message of the operation.</p> Source code in <code>tkww_api/services/model_service.py</code> <pre><code>def change_model(self, model_name: str) -&gt; Dict[str, str]:\n    \"\"\"Change the current model to the specified model.\n\n    Args:\n        model_name (str): The name of the model to change to.\n\n    Returns:\n        dict: A dictionary containing the status and message of the operation.\n    \"\"\"\n    try:\n        new_model = load_file(self.models_path, model_name)\n        if new_model is None:\n            Log.error(f\"Model {model_name} not found.\")\n            return {\"status\": \"Failed\", \"error\": f\"Model {model_name} not found.\"}\n\n        self.model_name = model_name\n        self.model = new_model\n        Log.info(f\"Model {model_name} loaded successfully.\")\n        return {\"status\": \"Success\", \"message\": f\"Model {model_name} loaded successfully.\"}\n\n    except Exception as e:\n        Log.error(f\"Error changing model: {e}\")\n        return {\"status\": \"Failed\", \"error\": str(e)}\n</code></pre>"},{"location":"services/#tkww_api.services.model_service.ModelService.predict","title":"<code>predict(features)</code>","text":"<p>Make a prediction based on the given features.</p> <p>This method makes a prediction based on the given features using the current model.</p> <p>Parameters:</p> Name Type Description Default <code>features</code> <code>PredictionRequest</code> <p>An instance of the PredictionRequest class containing the input features.</p> required <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>Tuple[str, str]: A tuple containing the prediction as a list and the model name as a string.</p> Source code in <code>tkww_api/services/model_service.py</code> <pre><code>def predict(self, features: PredictionRequest) -&gt; Tuple[str, str]:\n    \"\"\"Make a prediction based on the given features.\n\n    This method makes a prediction based on the given features using the current model.\n\n    Args:\n        features (PredictionRequest): An instance of the PredictionRequest class containing the input features.\n\n    Returns:\n        Tuple[str, str]: A tuple containing the prediction as a list and the model name as a string.\n    \"\"\"\n\n    feature_values = [value for value in vars(features).values()]\n    input_data = np.array([feature_values], dtype=np.float32)\n\n    prediction = self.model.predict(input_data)\n\n    Log.info(\"Prediction made successfully.\")\n\n    return prediction.tolist(), self.model_name\n</code></pre>"},{"location":"utils/","title":"<code>Utils</code>","text":""},{"location":"utils/#tkww_api.utils.utils.load_file","title":"<code>load_file(path, file_name)</code>","text":"<p>Load a file from the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the directory where the file is located.</p> required <code>file_name</code> <code>str</code> <p>The name of the file to be loaded.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The loaded file object.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified file is not found.</p> <code>Exception</code> <p>If there is an error while loading the file.</p> Source code in <code>tkww_api/utils/utils.py</code> <pre><code>def load_file(path: str, file_name: str) -&gt; Any:\n    \"\"\"Load a file from the specified path.\n\n    Args:\n        path (str): The path to the directory where the file is located.\n        file_name (str): The name of the file to be loaded.\n\n    Returns:\n        Any: The loaded file object.\n\n    Raises:\n        FileNotFoundError: If the specified file is not found.\n        Exception: If there is an error while loading the file.\n    \"\"\"\n    full_path = os.path.join(path, file_name)\n    try:\n        with open(full_path, \"rb\") as file:\n            return pickle.load(file)\n    except FileNotFoundError:\n        return None\n    except Exception as e:\n        return None\n</code></pre>"},{"location":"utils/#tkww_api.utils.utils.load_logging_config","title":"<code>load_logging_config(path)</code>","text":"<p>Load the logging configuration from a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the YAML file containing the logging configuration.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The loaded logging configuration as a dictionary.</p> Source code in <code>tkww_api/utils/utils.py</code> <pre><code>def load_logging_config(path: str) -&gt; dict:\n    \"\"\"\n    Load the logging configuration from a YAML file.\n\n    Args:\n        path (str): The path to the YAML file containing the logging configuration.\n\n    Returns:\n        dict: The loaded logging configuration as a dictionary.\n    \"\"\"\n    try:\n        with open(path, \"rt\") as f:\n            return yaml.safe_load(f)\n    except Exception as e:\n        raise RuntimeError(f\"Failed to load logging configuration: {e}\")\n</code></pre>"}]}